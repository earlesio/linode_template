name: 'Tofu Apply'
 
on:
  # push:
  #   paths:
  #     - 'terraform/**'
  #   branches: [ "main" ]
  workflow_dispatch:

  # Allows external webhook trigger
  repository_dispatch:
    types:
      - apply
 
jobs:
  tofu:
    name: 'Tofu Apply'
    env:
      TF_VAR_b2_s3_endpoint: ${{ vars.B2_S3_ENDPOINT }}
      TF_VAR_b2_application_key_id: ${{ vars.B2_APPLICATION_KEY_ID }}
      TF_VAR_b2_application_key: ${{ secrets.B2_APPLICATION_KEY }}
      TF_VAR_b2_tfstate_bucket: ${{ vars.B2_TFSTATE_BUCKET }}
      TF_VAR_b2_tfstate_key: ${{ vars.B2_TFSTATE_KEY }}
      TF_VAR_linode_token: ${{ secrets.LINODE_TOKEN }}
      TF_VAR_linode_authorized_users: ${{ vars.LINODE_AUTHORIZED_USERS }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_zone_id: ${{ vars.CLOUDFLARE_ZONE_ID }}

    runs-on: ubuntu-latest
    # environment: # No Environments available in Private (Free) Repo
 
    defaults:
      run:
        working-directory: ./terraform/

    steps:
    - uses: actions/checkout@v3
    - uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: 1.8.2
        tofu_wrapper: false
    
    - name: Tofu fmt
      id: fmt
      run: tofu fmt -check
      continue-on-error: true
    
    - name: Tofu Init
      id: init
      run: tofu init
      continue-on-error: false
    
    - name: Tofu Validate
      id: validate
      run: tofu validate -no-color
      continue-on-error: false
    
    - name: Tofu Plan
      id: plan
      run: tofu plan -concise -no-color
      continue-on-error: false
  
    - name: Tofu Apply
      id: apply
      run: tofu apply -no-color -auto-approve
      continue-on-error: false

    - name: Add SSH key
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir -p /home/runner/.ssh
        echo "${{ secrets.LINODE_PRIVATE_KEY }}" > /home/runner/.ssh/id_rsa
        chmod 600 /home/runner/.ssh/id_rsa
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null	
        ssh-add /home/runner/.ssh/id_rsa

    - name: Setup Ansible Terraform plugin
      working-directory: .
      run: ansible-galaxy install -r ansible/requirements.yml

    - name: Run Ansible Playbook
      working-directory: .
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        ANSIBLE_HOST_KEY_CHECKING: false
      run: ansible-playbook -i ansible/terraform.yml ansible/playbook.yml -u root -e "b2_access_key_id='${{ vars.B2_ACCESS_KEY_ID }}' b2_secret_access_key='${{ secrets.B2_SECRET_ACCESS_KEY }}'"
